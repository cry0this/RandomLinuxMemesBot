version: '3'
services:
  postgres:
    image: postgres:15.6-alpine3.18
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  keydb:
    image: eqalpha/keydb:x86_64_v6.3.4
    restart: unless-stopped
    volumes:
      - keydb_data:/data
    healthcheck:
      test: ["CMD-SHELL", "keydb-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    command: keydb-server /etc/keydb/keydb.conf --appendonly yes

  sentry:
    image: sentry:9.1.2
    restart: unless-stopped
    ports:
      - 9000:9000
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY}
      - SENTRY_REDIS_HOST=keydb
      - SENTRY_REDIS_DB=0
      - SENTRY_POSTGRES_HOST=postgres
      - SENTRY_DB_NAME=${POSTGRES_DB}
      - SENTRY_DB_USER=${POSTGRES_USER}
      - SENTRY_DB_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test:
        - "CMD"
        - "/bin/bash"
        - "-c"
        # Courtesy of https://unix.stackexchange.com/a/234089/108960
        - 'exec 3<>/dev/tcp/127.0.0.1/9000 && echo -e "GET /_health/ HTTP/1.1\r\nhost: 127.0.0.1\r\n\r\n" >&3 && grep ok -s -m 1 <&3'
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

    depends_on:
      postgres:
        condition: service_healthy
      keydb:
        condition: service_healthy

  api:
    build: ./vendor/Meme_Api
    restart: unless-stopped
    ports:
      - 8080:8080
    environment:
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - REDISCLOUD_URL=${REDISCLOUD_URL}
      - SENTRY_DSN=${SENTRY_DSN}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/_health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    depends_on:
      keydb:
        condition: service_healthy
      sentry:
        condition: service_healthy

volumes:
  postgres_data: {}
  keydb_data: {}
